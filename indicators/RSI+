//@version=6
//
// RSI Pro+ indicator with integrated ADX and cloud system.
//
// This script implements the APIDEVs "RSI Pro+" indicator as explained in the
// companion document and video. The core enhancements over the standard
// Relative Strength Index (RSI) include:
//
//  • A coloured cloud (or band) drawn between the RSI and its simple moving
//    average (SMA). The cloud turns green when the RSI is above the SMA
//    (suggesting bullish momentum) and red when the RSI is below its SMA
//    (suggesting bearish momentum). This visual aid reduces noise and makes
//    trend direction easier to interpret.
//
//  • Shaded overbought and oversold zones instead of thin lines. The default
//    settings shade the region between 70 and 80 in red to signal a potential
//    sell zone and between 30 and 20 in green to signal a potential buy
//    zone. These thresholds are adjustable and reflect common RSI guidance
//    that readings above 70 often indicate overbought conditions and readings
//    below 30 indicate oversold conditions【610955008608696†L259-L315】.
//
//  • Integration of the Average Directional Index (ADX) and its directional
//    movement components DI+ and DI-. The ADX measures trend strength
//    irrespective of direction, while DI+ and DI- identify whether price
//    movement is bullish or bearish. When ADX values rise above a user-set
//    threshold and DI+ is above DI-, the background behind the RSI cloud
//    turns green to highlight a strong uptrend; when DI- is above DI+, the
//    background turns red to signal a strong downtrend. The midline at 50
//    changes colour to reflect the prevailing directional movement (green
//    when DI+ > DI-, red when DI- > DI+).
//
//  • A comprehensive signalling system. Major signals occur when the RSI
//    pulls back to the midline (50) after entering an overbought or oversold
//    zone and then resumes in the direction of the dominant trend
//    (determined by DI+ and DI-). Additional minor signals mark crosses of
//    the RSI and its SMA and crosses of overbought/oversold thresholds.
//    Alerts are provided for each condition so that users can create
//    notifications in TradingView.
//
//  • A side panel summarising the current indicator state (RSI value,
//    direction, ADX value, trend strength and recommended action). The panel
//    supports Spanish (ES) and English (EN) via the `Idioma / Language`
//    input.
//
//  • Optional bar colouring based on either RSI direction or ADX/DI
//    dominance. Bollinger Bands on the RSI can be displayed as an
//    experimental overlay.
//
// The indicator includes numerous inputs to customise lengths, thresholds,
// colours, transparency and which features are displayed. It aims to match
// the visual style and functionality described in the APIDEVs tutorial while
// remaining self‑contained and easy to modify.

// === Input section ===

// Language selection: choose Spanish (ES) or English (EN). Text strings
// throughout the script are drawn from a simple dictionary below.
var string languageInput = input.string(title="Idioma / Language", defval="ES", options=["ES", "EN"])

// RSI configuration
int rsiLength = input.int(14, title="RSI Length", minval=1)
int maLength  = input.int(14, title="RSI MA Length", minval=1)
source rsiSource = input.source(close, title="RSI Source")

// Overbought and oversold zones (inner and outer bounds). These default
// thresholds can be adjusted. The inner threshold marks the start of
// overbought/oversold and the outer threshold defines the extreme band.
float overboughtInner = input.float(70.0, title="Overbought Start", minval=0, maxval=100)
float overboughtOuter = input.float(80.0, title="Overbought End", minval=0, maxval=100)
float oversoldInner   = input.float(30.0, title="Oversold Start", minval=0, maxval=100)
float oversoldOuter   = input.float(20.0, title="Oversold End", minval=0, maxval=100)

// ADX configuration
int adxLength     = input.int(14, title="ADX Length", minval=1)
int diLength      = input.int(14, title="DI Length", minval=1)
float trendLevel  = input.float(25.0, title="ADX Trend Level", minval=0)
float rangeLevel  = input.float(0.0, title="ADX Range Level", minval=0)

// Display options
bool showRSI       = input.bool(true, title="Show RSI Line")
bool showCloud     = input.bool(true, title="Show RSI Cloud")
bool showCloudSig  = input.bool(true, title="Show Cloud Signals")
bool showMidSig    = input.bool(true, title="Show Midline Signals")
bool showOBOSsig   = input.bool(true, title="Show OB/OS Signals")
bool showBB        = input.bool(false, title="Show Bollinger Bands (Experimental)")
bool showPanel     = input.bool(true, title="Show Information Panel")
string panelSize   = input.string("Normal", title="Panel Size", options=["Tiny", "Small", "Normal", "Large"])

// Bar colouring options
string barColouring = input.string("None", title="Bar Colouring", options=["None", "RSI", "ADX"])

// Transparency of filled regions (0 = opaque, 100 = transparent)
int cloudTransparency = input.int(75, title="Cloud Transparency", minval=0, maxval=100)
int zoneTransparency  = input.int(80, title="Zone Transparency", minval=0, maxval=100)

// === Helper functions ===

// Basic dictionary for bilingual support. Each key maps to an array of two
// strings: [Spanish, English]. When new text is added, include both
// translations here.
var table<string, string[]> DICT = table.new()
// Initialise dictionary entries only once (on the first bar). The
// `if (bar_index == 0)` guard ensures these calls run a single time.
if bar_index == 0
    // Titles and headings
    DICT.put("rsi",         ["RSI", "RSI"])
    DICT.put("adx",         ["ADX", "ADX"])
    DICT.put("trend",       ["Tendencia", "Trend"])
    DICT.put("signal",      ["Señal", "Signal"])
    DICT.put("long",        ["Compra", "Long"])
    DICT.put("short",       ["Venta", "Short"])
    DICT.put("neutral",     ["Rango", "Range"])
    DICT.put("strong",      ["Fuerte", "Strong"])
    DICT.put("weak",        ["Débil", "Weak"])
    DICT.put("rsi_overbought", ["RSI sobrecompra", "RSI overbought"])
    DICT.put("rsi_oversold",   ["RSI sobreventa", "RSI oversold"])
    DICT.put("cloud_cross",    ["Cruce de nube", "Cloud cross"])
    DICT.put("mid_cross",      ["Cruce de mitad", "Midline cross"])
    DICT.put("color_change",   ["Cambio de color", "Colour change"])
    DICT.put("ob_cross",       ["Cruzó sobrecompra", "Overbought cross"])
    DICT.put("os_cross",       ["Cruzó sobreventa", "Oversold cross"])
    DICT.put("panel_rsi",      ["RSI", "RSI"])
    DICT.put("panel_adx",      ["ADX", "ADX"])
    DICT.put("panel_action",   ["Acción", "Action"])
    DICT.put("strong_up",      ["Fuerte ↑", "Strong ↑"])
    DICT.put("strong_down",    ["Fuerte ↓", "Strong ↓"])
    DICT.put("weak_up",        ["Débil ↑", "Weak ↑"])
    DICT.put("weak_down",      ["Débil ↓", "Weak ↓"])
    DICT.put("rsi_dir_up",     ["RSI ↑", "RSI ↑"])
    DICT.put("rsi_dir_down",   ["RSI ↓", "RSI ↓"])
    DICT.put("adx_dir_up",     ["ADX ↑", "ADX ↑"])
    DICT.put("adx_dir_down",   ["ADX ↓", "ADX ↓"])

// Helper to fetch translated text for the current language
string t(string key) =>
    string[] pair = DICT.get(key)
    pair == na ? key : (languageInput == "ES" ? pair[0] : pair[1])

// === Calculation section ===

// Compute RSI and its moving average
float rsiVal = ta.rsi(rsiSource, rsiLength)
float rsiMA  = ta.sma(rsiVal, maLength)

// Compute ADX and DI components
float diPlus  = ta.diplus(diLength)
float diMinus = ta.diminus(diLength)
float adxVal  = ta.adx(adxLength)

// Determine directional bias based on DI cross
bool diBullish = diPlus > diMinus
bool diBearish = diPlus < diMinus

// Determine whether ADX indicates a strong trend
bool adxStrong = adxVal >= trendLevel
bool adxRange  = adxVal < trendLevel and adxVal >= rangeLevel
bool adxWeak   = adxVal < rangeLevel

// Slope direction of ADX and RSI
bool adxRising = adxVal > adxVal[1]
bool rsiRising = rsiVal > rsiVal[1]

// Determine RSI band colour (cloud colour) and RSI line colour
color rsiColour = diBullish ? color.green : color.red
// Intensify colours when in overbought/oversold zones
color rsiColourIntensified = rsiVal >= overboughtInner ? (diBullish ? color.new(color.green, 0) : color.new(color.red, 0)) :
    rsiVal <= oversoldInner ? (diBullish ? color.new(color.green, 0) : color.new(color.red, 0)) : rsiColour

// Cloud colour depends on whether RSI is above or below its MA
color cloudColour = rsiVal >= rsiMA ? color.green : color.red

// Midline colour depends on DI cross (green for bullish, red for bearish)
color midColour = diBullish ? color.green : diBearish ? color.red : color.gray

// Background shading when ADX indicates strong trend
color bgColour = adxStrong ? (diBullish ? color.new(color.green, 85) : color.new(color.red, 85)) : na

// === Signal Logic ===

// State variables to track whether RSI has been in overbought/oversold zones
var bool wasOversold = false
var bool wasOverbought = false

// Update oversold/overbought flags
wasOversold := (rsiVal <= oversoldInner or wasOversold) and not (rsiVal > oversoldInner and wasOversold and ta.crossover(rsiVal, oversoldInner)) ? wasOversold : (rsiVal <= oversoldInner)
wasOverbought := (rsiVal >= overboughtInner or wasOverbought) and not (rsiVal < overboughtInner and wasOverbought and ta.crossunder(rsiVal, overboughtInner)) ? wasOverbought : (rsiVal >= overboughtInner)

// Major signals: RSI crosses midline (50) after being oversold or overbought and in agreement with DI direction
bool crossAbove50 = ta.crossover(rsiVal, 50)
bool crossBelow50 = ta.crossunder(rsiVal, 50)

bool longSignal  = wasOversold and crossAbove50 and diBullish
bool shortSignal = wasOverbought and crossBelow50 and diBearish

// Reset flags after generating signals
if longSignal
    wasOversold := false
if shortSignal
    wasOverbought := false

// Secondary signals: RSI crosses its moving average (cloud cross)
bool cloudCrossUp   = ta.crossover(rsiVal, rsiMA)
bool cloudCrossDown = ta.crossunder(rsiVal, rsiMA)

// Secondary signals: RSI crosses overbought and oversold thresholds
bool overboughtCross = ta.crossover(rsiVal, overboughtInner)
bool oversoldCross   = ta.crossunder(rsiVal, oversoldInner)

// Colour change signals: RSI changes colour (i.e., DI cross) which can hint at trend weakness
bool colourChangeUp   = diBullish and diBearish[1]
bool colourChangeDown = diBearish and diBullish[1]

// === Plotting ===

// Overbought and oversold zone shading
plot(overboughtInner, title="Overbought Start", color=color.new(color.red, zoneTransparency), linewidth=0, style=plot.style_stepline, display=display.pane)
plot(overboughtOuter, title="Overbought End", color=color.new(color.red, zoneTransparency), linewidth=0, style=plot.style_stepline, display=display.pane)
plot(oversoldInner,   title="Oversold Start", color=color.new(color.green, zoneTransparency), linewidth=0, style=plot.style_stepline, display=display.pane)
plot(oversoldOuter,   title="Oversold End", color=color.new(color.green, zoneTransparency), linewidth=0, style=plot.style_stepline, display=display.pane)

// Fill the overbought and oversold zones with colour
bgcolor(rsiVal >= overboughtInner and rsiVal <= overboughtOuter ? color.new(color.red, 90) : na)
bgcolor(rsiVal <= oversoldInner and rsiVal >= oversoldOuter ? color.new(color.green, 90) : na)

// Plot the 50-level midline with dynamic colour
hline(50, title="Midline", color=midColour, linestyle=hline.style_dashed, linewidth=1)

// Plot RSI line and its moving average
plot(showRSI ? rsiVal : na, title="RSI", color=color.new(rsiColourIntensified, 0), linewidth=2)
plot(showRSI ? rsiMA  : na, title="RSI MA", color=color.new(color.orange, 0), linewidth=1)

// Plot the cloud between RSI and its MA (fill area)
plot(showCloud ? rsiVal : na, title="Cloud Top", color=color.new(cloudColour, 0), transp=100)
plot(showCloud ? rsiMA  : na, title="Cloud Bottom", color=color.new(cloudColour, 0), transp=100)
fill(plot1=showCloud ? rsiVal : na, plot2=showCloud ? rsiMA : na, color=color.new(cloudColour, cloudTransparency), title="RSI Cloud Fill")

// Optional Bollinger Bands drawn on the RSI (experimental)
int bbLength = 20
float bbBasis = ta.sma(rsiVal, bbLength)
float bbDev   = ta.stdev(rsiVal, bbLength)
float bbUpper = bbBasis + 2.0 * bbDev
float bbLower = bbBasis - 2.0 * bbDev
plot(showBB ? bbUpper : na, title="BB Upper", color=color.new(color.blue, 0), linewidth=1)
plot(showBB ? bbLower : na, title="BB Lower", color=color.new(color.blue, 0), linewidth=1)

// Midline signals: plot symbols when RSI crosses 50 with DI agreement
plotshape(showMidSig and longSignal,  title="Long Signal",  location=location.absolute, y=50, color=color.green, style=shape.labelup, text="L", textcolor=color.white, size=size.tiny)
plotshape(showMidSig and shortSignal, title="Short Signal", location=location.absolute, y=50, color=color.red,   style=shape.labeldown, text="S", textcolor=color.white, size=size.tiny)

// Cloud cross signals
plotshape(showCloudSig and cloudCrossUp,   title="Cloud Cross Up",   location=location.absolute, y=rsiVal, color=color.green, style=shape.triangleup,   size=size.tiny, text="↑", textcolor=color.white)
plotshape(showCloudSig and cloudCrossDown, title="Cloud Cross Down", location=location.absolute, y=rsiVal, color=color.red,   style=shape.triangledown, size=size.tiny, text="↓", textcolor=color.white)

// Overbought/oversold cross signals
plotshape(showOBOSsig and overboughtCross, title="Overbought Cross", location=location.absolute, y=rsiVal, color=color.red,   style=shape.circle, size=size.tiny)
plotshape(showOBOSsig and oversoldCross,   title="Oversold Cross",   location=location.absolute, y=rsiVal, color=color.green, style=shape.circle, size=size.tiny)

// Colour change signals (VR signals) – these appear when DI crosses and RSI colour changes
plotshape(showMidSig and colourChangeUp,   title="Colour Change Up",   location=location.absolute, y=rsiVal, color=color.lime, style=shape.xcross, size=size.tiny)
plotshape(showMidSig and colourChangeDown, title="Colour Change Down", location=location.absolute, y=rsiVal, color=color.maroon, style=shape.xcross, size=size.tiny)

// === Alerts ===

// Define unique identifiers for each alert condition. When adding alerts via
// TradingView's interface, users can select any of the following names.
alertcondition(longSignal,  title=t("long") + " (midline)", message=t("long") + " signal: RSI crossed above midline with trend confirmation on " + syminfo.ticker)
alertcondition(shortSignal, title=t("short") + " (midline)", message=t("short") + " signal: RSI crossed below midline with trend confirmation on " + syminfo.ticker)
alertcondition(colourChangeUp,   title=t("rsi_dir_up"),   message=t("rsi_dir_up") + ": RSI changed to bullish colour on " + syminfo.ticker)
alertcondition(colourChangeDown, title=t("rsi_dir_down"), message=t("rsi_dir_down") + ": RSI changed to bearish colour on " + syminfo.ticker)
alertcondition(cloudCrossUp,   title=t("cloud_cross") + " up",   message=t("cloud_cross") + " up on " + syminfo.ticker)
alertcondition(cloudCrossDown, title=t("cloud_cross") + " down", message=t("cloud_cross") + " down on " + syminfo.ticker)
alertcondition(overboughtCross, title=t("ob_cross"), message=t("ob_cross") + " on " + syminfo.ticker)
alertcondition(oversoldCross,   title=t("os_cross"), message=t("os_cross") + " on " + syminfo.ticker)

// === Bar colouring ===

// Choose bar colouring based on user preference
color barColor = na
if barColouring == "RSI"
    barColor := (rsiVal >= rsiMA ? (rsiVal >= overboughtInner ? color.new(color.red, 30) : (rsiVal <= oversoldInner ? color.new(color.green, 30) : color.new(color.green, 0))) : (rsiVal <= oversoldInner ? color.new(color.green, 30) : color.new(color.red, 0)))
else if barColouring == "ADX"
    barColor := diBullish ? color.new(color.green, 0) : diBearish ? color.new(color.red, 0) : na

barcolor(barColouring == "None" ? na : barColor)

// === Information panel ===

if showPanel
    // Determine panel dimensions based on selection
    int rows = 3
    int cols = 2
    int pad  = 1
    // Adjust font size and table location depending on panel size
    int panelFontSize = panelSize == "Tiny" ? 6 : panelSize == "Small" ? 8 : panelSize == "Normal" ? 10 : 12
    // Create table once
    var table infoTable = table.new(position=table.position.top_right, columns=cols, rows=rows, frame_width=1, frame_color=color.new(color.gray, 70), border_width=1, border_color=color.new(color.gray, 70))
    // Fill first column with labels
    table.cell(infoTable, 0, 0, t("panel_rsi"), bgcolor=color.new(color.black, 85), text_color=color.white, text_size=panelFontSize)
    table.cell(infoTable, 0, 1, t("panel_adx"), bgcolor=color.new(color.black, 85), text_color=color.white, text_size=panelFontSize)
    table.cell(infoTable, 0, 2, t("panel_action"), bgcolor=color.new(color.black, 85), text_color=color.white, text_size=panelFontSize)
    // Display RSI value and arrow
    string rsiStatus = str.tostring(rsiVal, "#.##") + (rsiRising ? " ↑" : " ↓")
    table.cell(infoTable, 1, 0, rsiStatus, bgcolor=color.new(color.dark_gray, 70), text_color=color.white, text_size=panelFontSize)
    // Display ADX value and arrow
    string adxStatus = str.tostring(adxVal, "#.##") + (adxRising ? " ↑" : " ↓")
    table.cell(infoTable, 1, 1, adxStatus, bgcolor=color.new(color.dark_gray, 70), text_color=color.white, text_size=panelFontSize)
    // Display trend strength and direction
    string trendStatus = adxStrong ? (diBullish ? t("strong_up") : t("strong_down")) : adxRange ? (diBullish ? t("weak_up") : t("weak_down")) : t("neutral")
    table.cell(infoTable, 1, 2, trendStatus, bgcolor=color.new(color.dark_gray, 70), text_color=color.white, text_size=panelFontSize)
    // Leave the last row blank for spacing
    table.cell(infoTable, 2, 0, "", bgcolor=color.new(color.black, 85), text_color=color.white, text_size=panelFontSize)
    table.cell(infoTable, 2, 1, "", bgcolor=color.new(color.black, 85), text_color=color.white, text_size=panelFontSize)
    table.cell(infoTable, 2, 2, "", bgcolor=color.new(color.black, 85), text_color=color.white, text_size=panelFontSize)

// Apply background shading based on ADX strength outside the panel to avoid drawing behind the table
bgcolor(bgColour)
